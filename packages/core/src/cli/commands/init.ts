import { promises as fs } from 'node:fs';
import path from 'node:path';
import { GlobalConfig } from '../../config/global-config';
import { ConsoleLogger } from '../../utils/logger';

/**
 * Initialize global rulesets directory and configuration.
 */
export async function initCommand(options: {
  global?: boolean;
  force?: boolean;
  verbose?: boolean;
}): Promise<void> {
  const logger = new ConsoleLogger(options.verbose ? 'debug' : 'info');
  
  if (options.global) {
    // Initialize global rulesets directory
    logger.info('üöÄ Initializing global rulesets directory...\n');
    
    const globalConfig = new GlobalConfig();
    const globalDir = globalConfig.getGlobalDirectory();
    logger.info(`üìÅ Location: ${globalDir}`);
    
    try {
      // Check if already exists
      if (!options.force) {
        try {
          await fs.access(path.join(globalDir, 'config.toml'));
          logger.warn('\n‚ö†Ô∏è  Global rulesets already initialized');
          logger.info('Use --force to reinitialize');
          return;
        } catch {
          // Doesn't exist, proceed
        }
      }
      
      // Initialize
      await globalConfig.load();
      
      // Create example ruleset
      await createExampleRuleset(globalDir, logger);
      
      // Create example command
      await createExampleCommand(globalDir, logger);
      
      logger.info('\n‚úÖ Global rulesets initialized successfully!');
      logger.info('\nüìö Next steps:');
      logger.info('   1. Browse available rulesets: rulesets list --global');
      logger.info('   2. Create a new ruleset: rulesets create <name> --global');
      logger.info('   3. Install rulesets to a project: rulesets install <name>');
      logger.info('   4. Auto-detect project needs: rulesets detect');
      
    } catch (error) {
      logger.error('Failed to initialize global rulesets:', error);
      process.exit(1);
    }
  } else {
    // Initialize project rulesets
    logger.info('üöÄ Initializing project rulesets...\n');
    
    try {
      // Create .rulesets directory in project
      await fs.mkdir('.rulesets', { recursive: true });
      
      // Create installed.json
      const installedPath = path.join('.rulesets', 'installed.json');
      const installedContent = JSON.stringify({
        "_comment": "Auto-generated by rulesets CLI - do not edit manually",
        "installed": {},
        "modified": {}
      }, null, 2);
      
      await fs.writeFile(installedPath, installedContent, 'utf-8');
      
      // Add to .gitignore if it exists
      try {
        const gitignorePath = '.gitignore';
        const gitignore = await fs.readFile(gitignorePath, 'utf-8');
        
        if (!gitignore.includes('.rulesets/')) {
          const updatedGitignore = gitignore + '\n# Rulesets tracking\n.rulesets/\n';
          await fs.writeFile(gitignorePath, updatedGitignore, 'utf-8');
          logger.info('üìù Added .rulesets/ to .gitignore');
        }
      } catch {
        // No .gitignore or error reading it
      }
      
      logger.info('‚úÖ Project rulesets initialized');
      
      // Run detection
      logger.info('\nüîç Detecting project configuration...');
      const { ProjectDetector } = await import('../../detection/project-detector');
      const globalConfigInstance = new GlobalConfig();
      const config = await globalConfigInstance.load();
      const detector = new ProjectDetector(config);
      const result = await detector.detect('.');
      
      if (result.suggestedSets.length > 0) {
        const summary = `
üìÅ Project Type: ${result.projectType.join(', ')}
üì¶ Dependencies: ${result.detectedDependencies.slice(0, 5).join(', ')}${result.detectedDependencies.length > 5 ? '...' : ''}
üéØ Suggested Rulesets: ${result.suggestedSets.join(', ')}
`;
        console.log(summary);
        logger.info('\nüí° To install suggested rulesets, run:');
        logger.info(`   rulesets install ${result.suggestedSets.join(' ')}`);
      }
      
    } catch (error) {
      logger.error('Failed to initialize project rulesets:', error);
      process.exit(1);
    }
  }
}

/**
 * Create an example ruleset.
 */
async function createExampleRuleset(globalDir: string, logger: ConsoleLogger): Promise<void> {
  const exampleDir = path.join(globalDir, 'sets', 'example');
  await fs.mkdir(exampleDir, { recursive: true });
  
  // Create rules.md
  const rulesContent = [
    '# Example Ruleset',
    '',
    'This is an example ruleset to get you started.',
    '',
    '## Code Style',
    '- Use 2 spaces for indentation',
    '- Prefer const over let',
    '- Use descriptive variable names',
    '',
    '## Best Practices',
    '- Write tests for all new features',
    '- Document complex logic',
    '- Keep functions small and focused',
  ].join('\n');
  
  await fs.writeFile(path.join(exampleDir, 'rules.md'), rulesContent, 'utf-8');
  
  // Create meta.toml
  const metaContent = [
    '[set]',
    'name = "Example"',
    'version = "1.0.0"',
    'description = "Example ruleset for demonstration"',
    'author = "Rulesets CLI"',
    'tags = ["example", "demo"]',
    '',
    '[extends]',
    'sets = []',
    '',
    '[detection]',
    'files = ["*.js", "*.ts"]',
  ].join('\n');
  
  await fs.writeFile(path.join(exampleDir, 'meta.toml'), metaContent, 'utf-8');
  
  logger.debug('üì¶ Created example ruleset');
}

/**
 * Create an example slash command.
 */
async function createExampleCommand(globalDir: string, logger: ConsoleLogger): Promise<void> {
  const commandsDir = path.join(globalDir, 'commands');
  
  const commandContent = [
    '---',
    'description: "Create a conventional commit message"',
    'argument-hint: "type message"',
    '---',
    '',
    '# Commit Command',
    '',
    'Create a conventional commit message with the format:',
    '`<type>(<scope>): <message>`',
    '',
    'Arguments: $ARGUMENTS',
    '',
    'Types:',
    '- feat: New feature',
    '- fix: Bug fix',
    '- docs: Documentation',
    '- style: Code style',
    '- refactor: Code refactoring',
    '- test: Tests',
    '- chore: Maintenance',
  ].join('\n');
  
  await fs.writeFile(path.join(commandsDir, 'commit.md'), commandContent, 'utf-8');
  
  logger.debug('‚ö° Created example slash command');
}